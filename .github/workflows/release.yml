name: Release
on:
  push:
    tags:
      - 'v*'

env:
  DOCKER_BUILDKIT: 1

jobs:
  build:
    runs-on: ubuntu-20.04
    name: Build
    strategy:
      matrix:
        arch: ["amd64", "arm-v7", "arm64", "ppc64le", "s390x"]
    env:
      OUTPUT_DIR: ${{ github.workspace }}/out
    steps:
    - uses: actions/checkout@v2
    - name: Build Binary
      env:
        DOCKER_BUILDKIT: 1
      run: |
        mkdir ${OUTPUT_DIR}
        RELEASE_TAG="${GITHUB_REF##*/}"
        ARCH_ID="${{ matrix.arch }}"
        BUILD_ARGS=--build-arg=TARGETARCH=${ARCH_ID}
        if [ "${ARCH_ID}" == "arm-v7" ] ; then
          BUILD_ARGS="--build-arg=TARGETARCH=arm --build-arg=GOARM=7"
        fi
        TAR_FILE_NAME="stargz-snapshotter-${RELEASE_TAG}-linux-${ARCH_ID}.tar.gz"
        SHA256SUM_FILE_NAME="${TAR_FILE_NAME}.sha256sum"
        docker build ${BUILD_ARGS} --target release-binaries -o - . | gzip > "${OUTPUT_DIR}/${TAR_FILE_NAME}"
        ( cd ${OUTPUT_DIR}; sha256sum ${TAR_FILE_NAME} ) > "${OUTPUT_DIR}/${SHA256SUM_FILE_NAME}"
    - name: Save Binary
      uses: actions/upload-artifact@v3.1.0
      with:
        name: builds-${{ matrix.arch }}
        path: ${{ env.OUTPUT_DIR }}/*

  release:
    runs-on: ubuntu-20.04
    name: Release
    needs: [build]
    env:
      OUTPUT_DIR: ${{ github.workspace }}/builds
    steps:
    - uses: actions/checkout@v2
    - name: Download Builds
      uses: actions/download-artifact@v2
      with:
        path: ${{ env.OUTPUT_DIR }}
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_TAG="${GITHUB_REF##*/}"
        cat <<EOF > ${GITHUB_WORKSPACE}/release-note.txt
        ${RELEASE_TAG}

        (TBD)
        EOF
        ASSET_FLAGS=()
        ls -al ${OUTPUT_DIR}/
        for A in "amd64" "arm-v7" "arm64" "ppc64le" "s390x" ; do
          for F in ${OUTPUT_DIR}/builds-${A}/* ; do
            ASSET_FLAGS+=("-a" "$F")
          done
        done
        hub release create "${ASSET_FLAGS[@]}" -F ${GITHUB_WORKSPACE}/release-note.txt --draft "${RELEASE_TAG}"
